//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace Crexta.Client.com.crexta.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CrextaWSSoap", Namespace="http://crexta.com/ws/")]
    public partial class CrextaWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetExternalIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateClientSoftwareOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClientLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMainListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CrextaWS() {
            this.Url = global::Crexta.Client.Properties.Settings.Default.Crexta_Client_com_crexta_www_CrextaWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetExternalIPAddressCompletedEventHandler GetExternalIPAddressCompleted;
        
        /// <remarks/>
        public event UpdateClientSoftwareCompletedEventHandler UpdateClientSoftwareCompleted;
        
        /// <remarks/>
        public event AddClientLogCompletedEventHandler AddClientLogCompleted;
        
        /// <remarks/>
        public event GetServerInformationCompletedEventHandler GetServerInformationCompleted;
        
        /// <remarks/>
        public event UpdateMainListCompletedEventHandler UpdateMainListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://crexta.com/ws/GetExternalIPAddress", RequestNamespace="http://crexta.com/ws/", ResponseNamespace="http://crexta.com/ws/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExternalIPAddress() {
            object[] results = this.Invoke("GetExternalIPAddress", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalIPAddressAsync() {
            this.GetExternalIPAddressAsync(null);
        }
        
        /// <remarks/>
        public void GetExternalIPAddressAsync(object userState) {
            if ((this.GetExternalIPAddressOperationCompleted == null)) {
                this.GetExternalIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalIPAddressOperationCompleted);
            }
            this.InvokeAsync("GetExternalIPAddress", new object[0], this.GetExternalIPAddressOperationCompleted, userState);
        }
        
        private void OnGetExternalIPAddressOperationCompleted(object arg) {
            if ((this.GetExternalIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalIPAddressCompleted(this, new GetExternalIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://crexta.com/ws/UpdateClientSoftware", RequestNamespace="http://crexta.com/ws/", ResponseNamespace="http://crexta.com/ws/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateClientSoftware(string current) {
            object[] results = this.Invoke("UpdateClientSoftware", new object[] {
                        current});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateClientSoftwareAsync(string current) {
            this.UpdateClientSoftwareAsync(current, null);
        }
        
        /// <remarks/>
        public void UpdateClientSoftwareAsync(string current, object userState) {
            if ((this.UpdateClientSoftwareOperationCompleted == null)) {
                this.UpdateClientSoftwareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClientSoftwareOperationCompleted);
            }
            this.InvokeAsync("UpdateClientSoftware", new object[] {
                        current}, this.UpdateClientSoftwareOperationCompleted, userState);
        }
        
        private void OnUpdateClientSoftwareOperationCompleted(object arg) {
            if ((this.UpdateClientSoftwareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateClientSoftwareCompleted(this, new UpdateClientSoftwareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://crexta.com/ws/AddClientLog", RequestNamespace="http://crexta.com/ws/", ResponseNamespace="http://crexta.com/ws/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddClientLog(long uniqueHash, string guid, string mac, short instance, string message, string exception) {
            object[] results = this.Invoke("AddClientLog", new object[] {
                        uniqueHash,
                        guid,
                        mac,
                        instance,
                        message,
                        exception});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddClientLogAsync(long uniqueHash, string guid, string mac, short instance, string message, string exception) {
            this.AddClientLogAsync(uniqueHash, guid, mac, instance, message, exception, null);
        }
        
        /// <remarks/>
        public void AddClientLogAsync(long uniqueHash, string guid, string mac, short instance, string message, string exception, object userState) {
            if ((this.AddClientLogOperationCompleted == null)) {
                this.AddClientLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClientLogOperationCompleted);
            }
            this.InvokeAsync("AddClientLog", new object[] {
                        uniqueHash,
                        guid,
                        mac,
                        instance,
                        message,
                        exception}, this.AddClientLogOperationCompleted, userState);
        }
        
        private void OnAddClientLogOperationCompleted(object arg) {
            if ((this.AddClientLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClientLogCompleted(this, new AddClientLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://crexta.com/ws/GetServerInformation", RequestNamespace="http://crexta.com/ws/", ResponseNamespace="http://crexta.com/ws/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerIpPort GetServerInformation(string securitykey) {
            object[] results = this.Invoke("GetServerInformation", new object[] {
                        securitykey});
            return ((ServerIpPort)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerInformationAsync(string securitykey) {
            this.GetServerInformationAsync(securitykey, null);
        }
        
        /// <remarks/>
        public void GetServerInformationAsync(string securitykey, object userState) {
            if ((this.GetServerInformationOperationCompleted == null)) {
                this.GetServerInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerInformationOperationCompleted);
            }
            this.InvokeAsync("GetServerInformation", new object[] {
                        securitykey}, this.GetServerInformationOperationCompleted, userState);
        }
        
        private void OnGetServerInformationOperationCompleted(object arg) {
            if ((this.GetServerInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerInformationCompleted(this, new GetServerInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://crexta.com/ws/UpdateMainList", RequestNamespace="http://crexta.com/ws/", ResponseNamespace="http://crexta.com/ws/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateMainList(string current) {
            object[] results = this.Invoke("UpdateMainList", new object[] {
                        current});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMainListAsync(string current) {
            this.UpdateMainListAsync(current, null);
        }
        
        /// <remarks/>
        public void UpdateMainListAsync(string current, object userState) {
            if ((this.UpdateMainListOperationCompleted == null)) {
                this.UpdateMainListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMainListOperationCompleted);
            }
            this.InvokeAsync("UpdateMainList", new object[] {
                        current}, this.UpdateMainListOperationCompleted, userState);
        }
        
        private void OnUpdateMainListOperationCompleted(object arg) {
            if ((this.UpdateMainListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMainListCompleted(this, new UpdateMainListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://crexta.com/ws/")]
    public partial class ServerIpPort {
        
        private string externalIpField;
        
        private string localIpField;
        
        private int portField;
        
        public ServerIpPort() {
            this.externalIpField = "";
            this.localIpField = "";
            this.portField = -1;
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string ExternalIp {
            get {
                return this.externalIpField;
            }
            set {
                this.externalIpField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string LocalIp {
            get {
                return this.localIpField;
            }
            set {
                this.localIpField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExternalIPAddressCompletedEventHandler(object sender, GetExternalIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateClientSoftwareCompletedEventHandler(object sender, UpdateClientSoftwareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateClientSoftwareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateClientSoftwareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddClientLogCompletedEventHandler(object sender, AddClientLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClientLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClientLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerInformationCompletedEventHandler(object sender, GetServerInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerIpPort Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerIpPort)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateMainListCompletedEventHandler(object sender, UpdateMainListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMainListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMainListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591