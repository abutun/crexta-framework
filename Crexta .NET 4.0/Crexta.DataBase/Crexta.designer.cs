#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crexta.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Crexta")]
	public partial class CrextaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppLog(AppLog instance);
    partial void UpdateAppLog(AppLog instance);
    partial void DeleteAppLog(AppLog instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertBrandKeyword(BrandKeyword instance);
    partial void UpdateBrandKeyword(BrandKeyword instance);
    partial void DeleteBrandKeyword(BrandKeyword instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategoryKeyword(CategoryKeyword instance);
    partial void UpdateCategoryKeyword(CategoryKeyword instance);
    partial void DeleteCategoryKeyword(CategoryKeyword instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCrextor(Crextor instance);
    partial void UpdateCrextor(Crextor instance);
    partial void DeleteCrextor(Crextor instance);
    partial void InsertCrextorGroup(CrextorGroup instance);
    partial void UpdateCrextorGroup(CrextorGroup instance);
    partial void DeleteCrextorGroup(CrextorGroup instance);
    partial void InsertCrextorResource(CrextorResource instance);
    partial void UpdateCrextorResource(CrextorResource instance);
    partial void DeleteCrextorResource(CrextorResource instance);
    partial void InsertCrextorSchedule(CrextorSchedule instance);
    partial void UpdateCrextorSchedule(CrextorSchedule instance);
    partial void DeleteCrextorSchedule(CrextorSchedule instance);
    partial void InsertCrextorUrl(CrextorUrl instance);
    partial void UpdateCrextorUrl(CrextorUrl instance);
    partial void DeleteCrextorUrl(CrextorUrl instance);
    partial void InsertDbField(DbField instance);
    partial void UpdateDbField(DbField instance);
    partial void DeleteDbField(DbField instance);
    partial void InsertDownload(Download instance);
    partial void UpdateDownload(Download instance);
    partial void DeleteDownload(Download instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertResourceType(ResourceType instance);
    partial void UpdateResourceType(ResourceType instance);
    partial void DeleteResourceType(ResourceType instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertResultAccess(ResultAccess instance);
    partial void UpdateResultAccess(ResultAccess instance);
    partial void DeleteResultAccess(ResultAccess instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertRuleBackup(RuleBackup instance);
    partial void UpdateRuleBackup(RuleBackup instance);
    partial void DeleteRuleBackup(RuleBackup instance);
    partial void InsertSequence(Sequence instance);
    partial void UpdateSequence(Sequence instance);
    partial void DeleteSequence(Sequence instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertUrlQueue(UrlQueue instance);
    partial void UpdateUrlQueue(UrlQueue instance);
    partial void DeleteUrlQueue(UrlQueue instance);
    partial void InsertVersion(Version instance);
    partial void UpdateVersion(Version instance);
    partial void DeleteVersion(Version instance);
    #endregion
		
		public CrextaDataContext() : 
				base(global::Crexta.DataBase.Properties.Settings.Default.CrextaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CrextaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrextaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrextaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrextaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppLog> AppLogs
		{
			get
			{
				return this.GetTable<AppLog>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<BrandKeyword> BrandKeywords
		{
			get
			{
				return this.GetTable<BrandKeyword>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategoryKeyword> CategoryKeywords
		{
			get
			{
				return this.GetTable<CategoryKeyword>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Crextor> Crextors
		{
			get
			{
				return this.GetTable<Crextor>();
			}
		}
		
		public System.Data.Linq.Table<CrextorGroup> CrextorGroups
		{
			get
			{
				return this.GetTable<CrextorGroup>();
			}
		}
		
		public System.Data.Linq.Table<CrextorResource> CrextorResources
		{
			get
			{
				return this.GetTable<CrextorResource>();
			}
		}
		
		public System.Data.Linq.Table<CrextorSchedule> CrextorSchedules
		{
			get
			{
				return this.GetTable<CrextorSchedule>();
			}
		}
		
		public System.Data.Linq.Table<CrextorUrl> CrextorUrls
		{
			get
			{
				return this.GetTable<CrextorUrl>();
			}
		}
		
		public System.Data.Linq.Table<DbField> DbFields
		{
			get
			{
				return this.GetTable<DbField>();
			}
		}
		
		public System.Data.Linq.Table<Download> Downloads
		{
			get
			{
				return this.GetTable<Download>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<ResourceType> ResourceTypes
		{
			get
			{
				return this.GetTable<ResourceType>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<ResultAccess> ResultAccesses
		{
			get
			{
				return this.GetTable<ResultAccess>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<RuleBackup> RuleBackups
		{
			get
			{
				return this.GetTable<RuleBackup>();
			}
		}
		
		public System.Data.Linq.Table<Sequence> Sequences
		{
			get
			{
				return this.GetTable<Sequence>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<UrlQueue> UrlQueues
		{
			get
			{
				return this.GetTable<UrlQueue>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CREXTORS_GetDataset")]
		public ISingleResult<CREXTORS_GetDatasetResult> CREXTORS_GetDataset([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageSize", DbType="Int")] System.Nullable<int> pageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubType", DbType="Int")] System.Nullable<int> subType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Refid", DbType="Int")] System.Nullable<int> refid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Instance", DbType="VarChar(64)")] string instance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExternalIp", DbType="VarChar(15)")] string externalIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalIp", DbType="VarChar(15)")] string localIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Machine", DbType="VarChar(64)")] string machine)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pageSize, type, subType, refid, instance, externalIp, localIp, machine);
			return ((ISingleResult<CREXTORS_GetDatasetResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SEQUENCE_SetPageIndex")]
		public int SEQUENCE_SetPageIndex([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubType", DbType="Int")] System.Nullable<int> subType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Refid", DbType="Int")] System.Nullable<int> refid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Instance", DbType="VarChar(64)")] string instance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExternalIp", DbType="VarChar(15)")] string externalIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalIp", DbType="VarChar(15)")] string localIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Machine", DbType="VarChar(64)")] string machine)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, subType, refid, instance, externalIp, localIp, machine);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CREXTORS_GetPageIndex")]
		public int CREXTORS_GetPageIndex([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageSize", DbType="Int")] System.Nullable<int> pageSize, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubType", DbType="Int")] System.Nullable<int> subType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Refid", DbType="Int")] System.Nullable<int> refid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Instance", DbType="VarChar(64)")] string instance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExternalIp", DbType="VarChar(15)")] string externalIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalIp", DbType="VarChar(15)")] string localIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Machine", DbType="VarChar(64)")] string machine)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pageSize, type, subType, refid, instance, externalIp, localIp, machine);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LOGS_LogAction")]
		public int LOGS_LogAction([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubType", DbType="Int")] System.Nullable<int> subType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Refid", DbType="Int")] System.Nullable<int> refid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Instance", DbType="VarChar(64)")] string instance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExternalIp", DbType="VarChar(15)")] string externalIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalIp", DbType="VarChar(15)")] string localIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Machine", DbType="VarChar(64)")] string machine, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Action", DbType="Int")] System.Nullable<int> action)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, subType, refid, instance, externalIp, localIp, machine, action);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SEQUENCE_ResetPageIndex")]
		public int SEQUENCE_ResetPageIndex([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Int")] System.Nullable<int> type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubType", DbType="Int")] System.Nullable<int> subType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Refid", DbType="Int")] System.Nullable<int> refid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Instance", DbType="VarChar(64)")] string instance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExternalIp", DbType="VarChar(15)")] string externalIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalIp", DbType="VarChar(15)")] string localIp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Machine", DbType="VarChar(64)")] string machine)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type, subType, refid, instance, externalIp, localIp, machine);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppLog")]
	public partial class AppLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Thread;
		
		private string _Level;
		
		private string _Logger;
		
		private string _Message;
		
		private string _Exception;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnThreadChanging(string value);
    partial void OnThreadChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnLoggerChanging(string value);
    partial void OnLoggerChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public AppLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logger", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Logger
		{
			get
			{
				return this._Logger;
			}
			set
			{
				if ((this._Logger != value))
				{
					this.OnLoggerChanging(value);
					this.SendPropertyChanging();
					this._Logger = value;
					this.SendPropertyChanged("Logger");
					this.OnLoggerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Tags;
		
		private System.Nullable<short> _Flags;
		
		private string _LogoPath;
		
		private EntitySet<BrandKeyword> _BrandKeywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnFlagsChanging(System.Nullable<short> value);
    partial void OnFlagsChanged();
    partial void OnLogoPathChanging(string value);
    partial void OnLogoPathChanged();
    #endregion
		
		public Brand()
		{
			this._BrandKeywords = new EntitySet<BrandKeyword>(new Action<BrandKeyword>(this.attach_BrandKeywords), new Action<BrandKeyword>(this.detach_BrandKeywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="VarChar(128)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(128)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="SmallInt")]
		public System.Nullable<short> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath", DbType="VarChar(256)")]
		public string LogoPath
		{
			get
			{
				return this._LogoPath;
			}
			set
			{
				if ((this._LogoPath != value))
				{
					this.OnLogoPathChanging(value);
					this.SendPropertyChanging();
					this._LogoPath = value;
					this.SendPropertyChanged("LogoPath");
					this.OnLogoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_BrandKeyword", Storage="_BrandKeywords", ThisKey="Id", OtherKey="BrandId")]
		public EntitySet<BrandKeyword> BrandKeywords
		{
			get
			{
				return this._BrandKeywords;
			}
			set
			{
				this._BrandKeywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrandKeywords(BrandKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_BrandKeywords(BrandKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrandKeyword")]
	public partial class BrandKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrandId;
		
		private int _KwId;
		
		private double _Factor;
		
		private EntityRef<Brand> _Brand;
		
		private EntityRef<Keyword> _Keyword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandIdChanging(int value);
    partial void OnBrandIdChanged();
    partial void OnKwIdChanging(int value);
    partial void OnKwIdChanged();
    partial void OnFactorChanging(double value);
    partial void OnFactorChanged();
    #endregion
		
		public BrandKeyword()
		{
			this._Brand = default(EntityRef<Brand>);
			this._Keyword = default(EntityRef<Keyword>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BrandId
		{
			get
			{
				return this._BrandId;
			}
			set
			{
				if ((this._BrandId != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIdChanging(value);
					this.SendPropertyChanging();
					this._BrandId = value;
					this.SendPropertyChanged("BrandId");
					this.OnBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KwId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KwId
		{
			get
			{
				return this._KwId;
			}
			set
			{
				if ((this._KwId != value))
				{
					if (this._Keyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKwIdChanging(value);
					this.SendPropertyChanging();
					this._KwId = value;
					this.SendPropertyChanged("KwId");
					this.OnKwIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Float NOT NULL")]
		public double Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_BrandKeyword", Storage="_Brand", ThisKey="BrandId", OtherKey="Id", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.BrandKeywords.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.BrandKeywords.Add(this);
						this._BrandId = value.Id;
					}
					else
					{
						this._BrandId = default(int);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_BrandKeyword", Storage="_Keyword", ThisKey="KwId", OtherKey="Id", IsForeignKey=true)]
		public Keyword Keyword
		{
			get
			{
				return this._Keyword.Entity;
			}
			set
			{
				Keyword previousValue = this._Keyword.Entity;
				if (((previousValue != value) 
							|| (this._Keyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keyword.Entity = null;
						previousValue.BrandKeywords.Remove(this);
					}
					this._Keyword.Entity = value;
					if ((value != null))
					{
						value.BrandKeywords.Add(this);
						this._KwId = value.Id;
					}
					else
					{
						this._KwId = default(int);
					}
					this.SendPropertyChanged("Keyword");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ParentId;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Tags;
		
		private System.Nullable<short> _Flags;
		
		private bool _Active;
		
		private EntitySet<CategoryKeyword> _CategoryKeywords;
		
		private EntitySet<CrextorResource> _CrextorResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnFlagsChanging(System.Nullable<short> value);
    partial void OnFlagsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Category()
		{
			this._CategoryKeywords = new EntitySet<CategoryKeyword>(new Action<CategoryKeyword>(this.attach_CategoryKeywords), new Action<CategoryKeyword>(this.detach_CategoryKeywords));
			this._CrextorResources = new EntitySet<CrextorResource>(new Action<CrextorResource>(this.attach_CrextorResources), new Action<CrextorResource>(this.detach_CrextorResources));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="VarChar(128)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(128)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="SmallInt")]
		public System.Nullable<short> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryKeyword", Storage="_CategoryKeywords", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<CategoryKeyword> CategoryKeywords
		{
			get
			{
				return this._CategoryKeywords;
			}
			set
			{
				this._CategoryKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CrextorResource", Storage="_CrextorResources", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<CrextorResource> CrextorResources
		{
			get
			{
				return this._CrextorResources;
			}
			set
			{
				this._CrextorResources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryKeywords(CategoryKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryKeywords(CategoryKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryKeyword")]
	public partial class CategoryKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private int _KwId;
		
		private double _Factor;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Keyword> _Keyword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnKwIdChanging(int value);
    partial void OnKwIdChanged();
    partial void OnFactorChanging(double value);
    partial void OnFactorChanged();
    #endregion
		
		public CategoryKeyword()
		{
			this._Category = default(EntityRef<Category>);
			this._Keyword = default(EntityRef<Keyword>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KwId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KwId
		{
			get
			{
				return this._KwId;
			}
			set
			{
				if ((this._KwId != value))
				{
					if (this._Keyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKwIdChanging(value);
					this.SendPropertyChanging();
					this._KwId = value;
					this.SendPropertyChanged("KwId");
					this.OnKwIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Float NOT NULL")]
		public double Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryKeyword", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryKeywords.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryKeywords.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_CategoryKeyword", Storage="_Keyword", ThisKey="KwId", OtherKey="Id", IsForeignKey=true)]
		public Keyword Keyword
		{
			get
			{
				return this._Keyword.Entity;
			}
			set
			{
				Keyword previousValue = this._Keyword.Entity;
				if (((previousValue != value) 
							|| (this._Keyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keyword.Entity = null;
						previousValue.CategoryKeywords.Remove(this);
					}
					this._Keyword.Entity = value;
					if ((value != null))
					{
						value.CategoryKeywords.Add(this);
						this._KwId = value.Id;
					}
					else
					{
						this._KwId = default(int);
					}
					this.SendPropertyChanged("Keyword");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CountryId;
		
		private string _Name;
		
		private string _Tags;
		
		private EntitySet<Company> _Companies;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public City()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(128)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_Companies", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CountryId;
		
		private long _UniqueHash;
		
		private string _Guid;
		
		private string _Name;
		
		private string _ExternalIp;
		
		private string _LocalIp;
		
		private string _Mac;
		
		private short _Instance;
		
		private byte _CurrentMode;
		
		private int _ItemCount;
		
		private System.DateTime _Date;
		
		private int _ServerId;
		
		private bool _UselocalId;
		
		private bool _Connected;
		
		private EntitySet<UrlQueue> _UrlQueues;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnUniqueHashChanging(long value);
    partial void OnUniqueHashChanged();
    partial void OnGuidChanging(string value);
    partial void OnGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExternalIpChanging(string value);
    partial void OnExternalIpChanged();
    partial void OnLocalIpChanging(string value);
    partial void OnLocalIpChanged();
    partial void OnMacChanging(string value);
    partial void OnMacChanged();
    partial void OnInstanceChanging(short value);
    partial void OnInstanceChanged();
    partial void OnCurrentModeChanging(byte value);
    partial void OnCurrentModeChanged();
    partial void OnItemCountChanging(int value);
    partial void OnItemCountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnServerIdChanging(int value);
    partial void OnServerIdChanged();
    partial void OnUselocalIdChanging(bool value);
    partial void OnUselocalIdChanged();
    partial void OnConnectedChanging(bool value);
    partial void OnConnectedChanged();
    #endregion
		
		public Client()
		{
			this._UrlQueues = new EntitySet<UrlQueue>(new Action<UrlQueue>(this.attach_UrlQueues), new Action<UrlQueue>(this.detach_UrlQueues));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueHash", DbType="BigInt NOT NULL")]
		public long UniqueHash
		{
			get
			{
				return this._UniqueHash;
			}
			set
			{
				if ((this._UniqueHash != value))
				{
					this.OnUniqueHashChanging(value);
					this.SendPropertyChanging();
					this._UniqueHash = value;
					this.SendPropertyChanged("UniqueHash");
					this.OnUniqueHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalIp", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ExternalIp
		{
			get
			{
				return this._ExternalIp;
			}
			set
			{
				if ((this._ExternalIp != value))
				{
					this.OnExternalIpChanging(value);
					this.SendPropertyChanging();
					this._ExternalIp = value;
					this.SendPropertyChanged("ExternalIp");
					this.OnExternalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalIp", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string LocalIp
		{
			get
			{
				return this._LocalIp;
			}
			set
			{
				if ((this._LocalIp != value))
				{
					this.OnLocalIpChanging(value);
					this.SendPropertyChanging();
					this._LocalIp = value;
					this.SendPropertyChanged("LocalIp");
					this.OnLocalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mac", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Mac
		{
			get
			{
				return this._Mac;
			}
			set
			{
				if ((this._Mac != value))
				{
					this.OnMacChanging(value);
					this.SendPropertyChanging();
					this._Mac = value;
					this.SendPropertyChanged("Mac");
					this.OnMacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instance", DbType="SmallInt NOT NULL")]
		public short Instance
		{
			get
			{
				return this._Instance;
			}
			set
			{
				if ((this._Instance != value))
				{
					this.OnInstanceChanging(value);
					this.SendPropertyChanging();
					this._Instance = value;
					this.SendPropertyChanged("Instance");
					this.OnInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentMode", DbType="TinyInt NOT NULL")]
		public byte CurrentMode
		{
			get
			{
				return this._CurrentMode;
			}
			set
			{
				if ((this._CurrentMode != value))
				{
					this.OnCurrentModeChanging(value);
					this.SendPropertyChanging();
					this._CurrentMode = value;
					this.SendPropertyChanged("CurrentMode");
					this.OnCurrentModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCount", DbType="Int NOT NULL")]
		public int ItemCount
		{
			get
			{
				return this._ItemCount;
			}
			set
			{
				if ((this._ItemCount != value))
				{
					this.OnItemCountChanging(value);
					this.SendPropertyChanging();
					this._ItemCount = value;
					this.SendPropertyChanged("ItemCount");
					this.OnItemCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerId", DbType="Int NOT NULL")]
		public int ServerId
		{
			get
			{
				return this._ServerId;
			}
			set
			{
				if ((this._ServerId != value))
				{
					this.OnServerIdChanging(value);
					this.SendPropertyChanging();
					this._ServerId = value;
					this.SendPropertyChanged("ServerId");
					this.OnServerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UselocalId", DbType="Bit NOT NULL")]
		public bool UselocalId
		{
			get
			{
				return this._UselocalId;
			}
			set
			{
				if ((this._UselocalId != value))
				{
					this.OnUselocalIdChanging(value);
					this.SendPropertyChanging();
					this._UselocalId = value;
					this.SendPropertyChanged("UselocalId");
					this.OnUselocalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Connected", DbType="Bit NOT NULL")]
		public bool Connected
		{
			get
			{
				return this._Connected;
			}
			set
			{
				if ((this._Connected != value))
				{
					this.OnConnectedChanging(value);
					this.SendPropertyChanging();
					this._Connected = value;
					this.SendPropertyChanged("Connected");
					this.OnConnectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UrlQueue", Storage="_UrlQueues", ThisKey="Id", OtherKey="UFClientId")]
		public EntitySet<UrlQueue> UrlQueues
		{
			get
			{
				return this._UrlQueues;
			}
			set
			{
				this._UrlQueues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Client", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _CountryId;
		
		private string _Name;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _State;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _SecretKey;
		
		private string _Ip;
		
		private EntitySet<Crextor> _Crextors;
		
		private EntitySet<DbField> _DbFields;
		
		private EntitySet<ResultAccess> _ResultAccesses;
		
		private EntitySet<Rule> _Rules;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnSecretKeyChanging(string value);
    partial void OnSecretKeyChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public Company()
		{
			this._Crextors = new EntitySet<Crextor>(new Action<Crextor>(this.attach_Crextors), new Action<Crextor>(this.detach_Crextors));
			this._DbFields = new EntitySet<DbField>(new Action<DbField>(this.attach_DbFields), new Action<DbField>(this.detach_DbFields));
			this._ResultAccesses = new EntitySet<ResultAccess>(new Action<ResultAccess>(this.attach_ResultAccesses), new Action<ResultAccess>(this.detach_ResultAccesses));
			this._Rules = new EntitySet<Rule>(new Action<Rule>(this.attach_Rules), new Action<Rule>(this.detach_Rules));
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(128)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(32)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecretKey", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string SecretKey
		{
			get
			{
				return this._SecretKey;
			}
			set
			{
				if ((this._SecretKey != value))
				{
					this.OnSecretKeyChanging(value);
					this.SendPropertyChanging();
					this._SecretKey = value;
					this.SendPropertyChanged("SecretKey");
					this.OnSecretKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(15)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Crextor", Storage="_Crextors", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Crextor> Crextors
		{
			get
			{
				return this._Crextors;
			}
			set
			{
				this._Crextors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DbField", Storage="_DbFields", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<DbField> DbFields
		{
			get
			{
				return this._DbFields;
			}
			set
			{
				this._DbFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ResultAccess", Storage="_ResultAccesses", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<ResultAccess> ResultAccesses
		{
			get
			{
				return this._ResultAccesses;
			}
			set
			{
				this._ResultAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Rule", Storage="_Rules", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Rule> Rules
		{
			get
			{
				return this._Rules;
			}
			set
			{
				this._Rules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_DbFields(DbField entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_DbFields(DbField entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ResultAccesses(ResultAccess entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ResultAccesses(ResultAccess entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Crextor> _Crextors;
		
		private EntitySet<Server> _Servers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Crextors = new EntitySet<Crextor>(new Action<Crextor>(this.attach_Crextors), new Action<Crextor>(this.detach_Crextors));
			this._Servers = new EntitySet<Server>(new Action<Server>(this.attach_Servers), new Action<Server>(this.detach_Servers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Client", Storage="_Clients", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Companies", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Crextor", Storage="_Crextors", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Crextor> Crextors
		{
			get
			{
				return this._Crextors;
			}
			set
			{
				this._Crextors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Server", Storage="_Servers", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Server> Servers
		{
			get
			{
				return this._Servers;
			}
			set
			{
				this._Servers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Crextor")]
	public partial class Crextor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RuleId;
		
		private int _CompanyId;
		
		private int _GroupId;
		
		private int _CountryId;
		
		private string _ShortName;
		
		private string _Name;
		
		private string _Description;
		
		private string _Tags;
		
		private string _Url;
		
		private System.Nullable<int> _TotalItems;
		
		private string _ExtraDomains;
		
		private string _SkipUrls;
		
		private string _LogoPath;
		
		private System.Nullable<System.DateTime> _LastCrawlStart;
		
		private System.Nullable<System.DateTime> _LastCrawlFinish;
		
		private bool _Paid;
		
		private System.Nullable<bool> _Crawled;
		
		private bool _Active;
		
		private bool _UseResources;
		
		private double _Rating;
		
		private System.Nullable<double> _Priority;
		
		private EntitySet<CrextorResource> _CrextorResources;
		
		private EntityRef<CrextorSchedule> _CrextorSchedule;
		
		private EntitySet<CrextorUrl> _CrextorUrls;
		
		private EntitySet<Result> _Results;
		
		private EntitySet<ResultAccess> _ResultAccesses;
		
		private EntitySet<UrlQueue> _UrlQueues;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<CrextorGroup> _CrextorGroup;
		
		private EntityRef<Rule> _Rule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRuleIdChanging(int value);
    partial void OnRuleIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTotalItemsChanging(System.Nullable<int> value);
    partial void OnTotalItemsChanged();
    partial void OnExtraDomainsChanging(string value);
    partial void OnExtraDomainsChanged();
    partial void OnSkipUrlsChanging(string value);
    partial void OnSkipUrlsChanged();
    partial void OnLogoPathChanging(string value);
    partial void OnLogoPathChanged();
    partial void OnLastCrawlStartChanging(System.Nullable<System.DateTime> value);
    partial void OnLastCrawlStartChanged();
    partial void OnLastCrawlFinishChanging(System.Nullable<System.DateTime> value);
    partial void OnLastCrawlFinishChanged();
    partial void OnPaidChanging(bool value);
    partial void OnPaidChanged();
    partial void OnCrawledChanging(System.Nullable<bool> value);
    partial void OnCrawledChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnUseResourcesChanging(bool value);
    partial void OnUseResourcesChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    partial void OnPriorityChanging(System.Nullable<double> value);
    partial void OnPriorityChanged();
    #endregion
		
		public Crextor()
		{
			this._CrextorResources = new EntitySet<CrextorResource>(new Action<CrextorResource>(this.attach_CrextorResources), new Action<CrextorResource>(this.detach_CrextorResources));
			this._CrextorSchedule = default(EntityRef<CrextorSchedule>);
			this._CrextorUrls = new EntitySet<CrextorUrl>(new Action<CrextorUrl>(this.attach_CrextorUrls), new Action<CrextorUrl>(this.detach_CrextorUrls));
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._ResultAccesses = new EntitySet<ResultAccess>(new Action<ResultAccess>(this.attach_ResultAccesses), new Action<ResultAccess>(this.detach_ResultAccesses));
			this._UrlQueues = new EntitySet<UrlQueue>(new Action<UrlQueue>(this.attach_UrlQueues), new Action<UrlQueue>(this.detach_UrlQueues));
			this._Company = default(EntityRef<Company>);
			this._Country = default(EntityRef<Country>);
			this._CrextorGroup = default(EntityRef<CrextorGroup>);
			this._Rule = default(EntityRef<Rule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="Int NOT NULL")]
		public int RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._CrextorGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(64)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2083) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalItems", DbType="Int")]
		public System.Nullable<int> TotalItems
		{
			get
			{
				return this._TotalItems;
			}
			set
			{
				if ((this._TotalItems != value))
				{
					this.OnTotalItemsChanging(value);
					this.SendPropertyChanging();
					this._TotalItems = value;
					this.SendPropertyChanged("TotalItems");
					this.OnTotalItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraDomains", DbType="NVarChar(512)")]
		public string ExtraDomains
		{
			get
			{
				return this._ExtraDomains;
			}
			set
			{
				if ((this._ExtraDomains != value))
				{
					this.OnExtraDomainsChanging(value);
					this.SendPropertyChanging();
					this._ExtraDomains = value;
					this.SendPropertyChanged("ExtraDomains");
					this.OnExtraDomainsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkipUrls", DbType="NVarChar(512)")]
		public string SkipUrls
		{
			get
			{
				return this._SkipUrls;
			}
			set
			{
				if ((this._SkipUrls != value))
				{
					this.OnSkipUrlsChanging(value);
					this.SendPropertyChanging();
					this._SkipUrls = value;
					this.SendPropertyChanged("SkipUrls");
					this.OnSkipUrlsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath", DbType="VarChar(64)")]
		public string LogoPath
		{
			get
			{
				return this._LogoPath;
			}
			set
			{
				if ((this._LogoPath != value))
				{
					this.OnLogoPathChanging(value);
					this.SendPropertyChanging();
					this._LogoPath = value;
					this.SendPropertyChanged("LogoPath");
					this.OnLogoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCrawlStart", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastCrawlStart
		{
			get
			{
				return this._LastCrawlStart;
			}
			set
			{
				if ((this._LastCrawlStart != value))
				{
					this.OnLastCrawlStartChanging(value);
					this.SendPropertyChanging();
					this._LastCrawlStart = value;
					this.SendPropertyChanged("LastCrawlStart");
					this.OnLastCrawlStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCrawlFinish", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastCrawlFinish
		{
			get
			{
				return this._LastCrawlFinish;
			}
			set
			{
				if ((this._LastCrawlFinish != value))
				{
					this.OnLastCrawlFinishChanging(value);
					this.SendPropertyChanging();
					this._LastCrawlFinish = value;
					this.SendPropertyChanged("LastCrawlFinish");
					this.OnLastCrawlFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit NOT NULL")]
		public bool Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crawled", DbType="Bit")]
		public System.Nullable<bool> Crawled
		{
			get
			{
				return this._Crawled;
			}
			set
			{
				if ((this._Crawled != value))
				{
					this.OnCrawledChanging(value);
					this.SendPropertyChanging();
					this._Crawled = value;
					this.SendPropertyChanged("Crawled");
					this.OnCrawledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseResources", DbType="Bit NOT NULL")]
		public bool UseResources
		{
			get
			{
				return this._UseResources;
			}
			set
			{
				if ((this._UseResources != value))
				{
					this.OnUseResourcesChanging(value);
					this.SendPropertyChanging();
					this._UseResources = value;
					this.SendPropertyChanged("UseResources");
					this.OnUseResourcesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Float")]
		public System.Nullable<double> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorResource", Storage="_CrextorResources", ThisKey="Id", OtherKey="CrextorId")]
		public EntitySet<CrextorResource> CrextorResources
		{
			get
			{
				return this._CrextorResources;
			}
			set
			{
				this._CrextorResources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorSchedule", Storage="_CrextorSchedule", ThisKey="Id", OtherKey="CrextorId", IsUnique=true, IsForeignKey=false)]
		public CrextorSchedule CrextorSchedule
		{
			get
			{
				return this._CrextorSchedule.Entity;
			}
			set
			{
				CrextorSchedule previousValue = this._CrextorSchedule.Entity;
				if (((previousValue != value) 
							|| (this._CrextorSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CrextorSchedule.Entity = null;
						previousValue.Crextor = null;
					}
					this._CrextorSchedule.Entity = value;
					if ((value != null))
					{
						value.Crextor = this;
					}
					this.SendPropertyChanged("CrextorSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorUrl", Storage="_CrextorUrls", ThisKey="Id", OtherKey="CrextorId")]
		public EntitySet<CrextorUrl> CrextorUrls
		{
			get
			{
				return this._CrextorUrls;
			}
			set
			{
				this._CrextorUrls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_Result", Storage="_Results", ThisKey="Id", OtherKey="CrextorId")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_ResultAccess", Storage="_ResultAccesses", ThisKey="Id", OtherKey="CrextorId")]
		public EntitySet<ResultAccess> ResultAccesses
		{
			get
			{
				return this._ResultAccesses;
			}
			set
			{
				this._ResultAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_UrlQueue", Storage="_UrlQueues", ThisKey="Id", OtherKey="CrextorId")]
		public EntitySet<UrlQueue> UrlQueues
		{
			get
			{
				return this._UrlQueues;
			}
			set
			{
				this._UrlQueues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Crextor", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Crextors.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Crextors.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Crextor", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Crextors.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Crextors.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrextorGroup_Crextor", Storage="_CrextorGroup", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public CrextorGroup CrextorGroup
		{
			get
			{
				return this._CrextorGroup.Entity;
			}
			set
			{
				CrextorGroup previousValue = this._CrextorGroup.Entity;
				if (((previousValue != value) 
							|| (this._CrextorGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CrextorGroup.Entity = null;
						previousValue.Crextors.Remove(this);
					}
					this._CrextorGroup.Entity = value;
					if ((value != null))
					{
						value.Crextors.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("CrextorGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Crextor", Storage="_Rule", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.Crextors.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.Crextors.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = this;
		}
		
		private void detach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = null;
		}
		
		private void attach_CrextorUrls(CrextorUrl entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = this;
		}
		
		private void detach_CrextorUrls(CrextorUrl entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = null;
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = null;
		}
		
		private void attach_ResultAccesses(ResultAccess entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = this;
		}
		
		private void detach_ResultAccesses(ResultAccess entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = null;
		}
		
		private void attach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = this;
		}
		
		private void detach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Crextor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrextorGroup")]
	public partial class CrextorGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ParentId;
		
		private string _Name;
		
		private EntitySet<Crextor> _Crextors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CrextorGroup()
		{
			this._Crextors = new EntitySet<Crextor>(new Action<Crextor>(this.attach_Crextors), new Action<Crextor>(this.detach_Crextors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrextorGroup_Crextor", Storage="_Crextors", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Crextor> Crextors
		{
			get
			{
				return this._Crextors;
			}
			set
			{
				this._Crextors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.CrextorGroup = this;
		}
		
		private void detach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.CrextorGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrextorResource")]
	public partial class CrextorResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CrextorId;
		
		private System.Nullable<int> _CategoryId;
		
		private short _TypeId;
		
		private string _Key;
		
		private string _Name;
		
		private string _ParentKey;
		
		private string _Url;
		
		private bool _OverrideCategory;
		
		private bool _DiscoverRedirects;
		
		private short _Order;
		
		private bool _Active;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Crextor> _Crextor;
		
		private EntityRef<ResourceType> _ResourceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnTypeIdChanging(short value);
    partial void OnTypeIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentKeyChanging(string value);
    partial void OnParentKeyChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnOverrideCategoryChanging(bool value);
    partial void OnOverrideCategoryChanged();
    partial void OnDiscoverRedirectsChanging(bool value);
    partial void OnDiscoverRedirectsChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public CrextorResource()
		{
			this._Category = default(EntityRef<Category>);
			this._Crextor = default(EntityRef<Crextor>);
			this._ResourceType = default(EntityRef<ResourceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL")]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="SmallInt NOT NULL")]
		public short TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._ResourceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="NVarChar(50)")]
		public string ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2083) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideCategory", DbType="Bit NOT NULL")]
		public bool OverrideCategory
		{
			get
			{
				return this._OverrideCategory;
			}
			set
			{
				if ((this._OverrideCategory != value))
				{
					this.OnOverrideCategoryChanging(value);
					this.SendPropertyChanging();
					this._OverrideCategory = value;
					this.SendPropertyChanged("OverrideCategory");
					this.OnOverrideCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscoverRedirects", DbType="Bit NOT NULL")]
		public bool DiscoverRedirects
		{
			get
			{
				return this._DiscoverRedirects;
			}
			set
			{
				if ((this._DiscoverRedirects != value))
				{
					this.OnDiscoverRedirectsChanging(value);
					this.SendPropertyChanging();
					this._DiscoverRedirects = value;
					this.SendPropertyChanged("DiscoverRedirects");
					this.OnDiscoverRedirectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CrextorResource", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CrextorResources.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CrextorResources.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorResource", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.CrextorResources.Remove(this);
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.CrextorResources.Add(this);
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceType_CrextorResource", Storage="_ResourceType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public ResourceType ResourceType
		{
			get
			{
				return this._ResourceType.Entity;
			}
			set
			{
				ResourceType previousValue = this._ResourceType.Entity;
				if (((previousValue != value) 
							|| (this._ResourceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceType.Entity = null;
						previousValue.CrextorResources.Remove(this);
					}
					this._ResourceType.Entity = value;
					if ((value != null))
					{
						value.CrextorResources.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(short);
					}
					this.SendPropertyChanged("ResourceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrextorSchedule")]
	public partial class CrextorSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CrextorId;
		
		private byte _Type;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<bool> _Monday;
		
		private System.Nullable<bool> _Tuesday;
		
		private System.Nullable<bool> _Wednesday;
		
		private System.Nullable<bool> _Thursday;
		
		private System.Nullable<bool> _Friday;
		
		private System.Nullable<bool> _Saturday;
		
		private System.Nullable<bool> _Sunday;
		
		private System.Nullable<System.DateTime> _From;
		
		private System.Nullable<System.DateTime> _To;
		
		private System.Nullable<short> _Minutes;
		
		private System.Nullable<System.DateTime> _LastRun;
		
		private EntityRef<Crextor> _Crextor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnMondayChanging(System.Nullable<bool> value);
    partial void OnMondayChanged();
    partial void OnTuesdayChanging(System.Nullable<bool> value);
    partial void OnTuesdayChanged();
    partial void OnWednesdayChanging(System.Nullable<bool> value);
    partial void OnWednesdayChanged();
    partial void OnThursdayChanging(System.Nullable<bool> value);
    partial void OnThursdayChanged();
    partial void OnFridayChanging(System.Nullable<bool> value);
    partial void OnFridayChanged();
    partial void OnSaturdayChanging(System.Nullable<bool> value);
    partial void OnSaturdayChanged();
    partial void OnSundayChanging(System.Nullable<bool> value);
    partial void OnSundayChanged();
    partial void OnFromChanging(System.Nullable<System.DateTime> value);
    partial void OnFromChanged();
    partial void OnToChanging(System.Nullable<System.DateTime> value);
    partial void OnToChanged();
    partial void OnMinutesChanging(System.Nullable<short> value);
    partial void OnMinutesChanged();
    partial void OnLastRunChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRunChanged();
    #endregion
		
		public CrextorSchedule()
		{
			this._Crextor = default(EntityRef<Crextor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monday", DbType="Bit")]
		public System.Nullable<bool> Monday
		{
			get
			{
				return this._Monday;
			}
			set
			{
				if ((this._Monday != value))
				{
					this.OnMondayChanging(value);
					this.SendPropertyChanging();
					this._Monday = value;
					this.SendPropertyChanged("Monday");
					this.OnMondayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tuesday", DbType="Bit")]
		public System.Nullable<bool> Tuesday
		{
			get
			{
				return this._Tuesday;
			}
			set
			{
				if ((this._Tuesday != value))
				{
					this.OnTuesdayChanging(value);
					this.SendPropertyChanging();
					this._Tuesday = value;
					this.SendPropertyChanged("Tuesday");
					this.OnTuesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wednesday", DbType="Bit")]
		public System.Nullable<bool> Wednesday
		{
			get
			{
				return this._Wednesday;
			}
			set
			{
				if ((this._Wednesday != value))
				{
					this.OnWednesdayChanging(value);
					this.SendPropertyChanging();
					this._Wednesday = value;
					this.SendPropertyChanged("Wednesday");
					this.OnWednesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thursday", DbType="Bit")]
		public System.Nullable<bool> Thursday
		{
			get
			{
				return this._Thursday;
			}
			set
			{
				if ((this._Thursday != value))
				{
					this.OnThursdayChanging(value);
					this.SendPropertyChanging();
					this._Thursday = value;
					this.SendPropertyChanged("Thursday");
					this.OnThursdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friday", DbType="Bit")]
		public System.Nullable<bool> Friday
		{
			get
			{
				return this._Friday;
			}
			set
			{
				if ((this._Friday != value))
				{
					this.OnFridayChanging(value);
					this.SendPropertyChanging();
					this._Friday = value;
					this.SendPropertyChanged("Friday");
					this.OnFridayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Saturday", DbType="Bit")]
		public System.Nullable<bool> Saturday
		{
			get
			{
				return this._Saturday;
			}
			set
			{
				if ((this._Saturday != value))
				{
					this.OnSaturdayChanging(value);
					this.SendPropertyChanging();
					this._Saturday = value;
					this.SendPropertyChanged("Saturday");
					this.OnSaturdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sunday", DbType="Bit")]
		public System.Nullable<bool> Sunday
		{
			get
			{
				return this._Sunday;
			}
			set
			{
				if ((this._Sunday != value))
				{
					this.OnSundayChanging(value);
					this.SendPropertyChanging();
					this._Sunday = value;
					this.SendPropertyChanged("Sunday");
					this.OnSundayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="DateTime2")]
		public System.Nullable<System.DateTime> From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="DateTime2")]
		public System.Nullable<System.DateTime> To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minutes", DbType="SmallInt")]
		public System.Nullable<short> Minutes
		{
			get
			{
				return this._Minutes;
			}
			set
			{
				if ((this._Minutes != value))
				{
					this.OnMinutesChanging(value);
					this.SendPropertyChanging();
					this._Minutes = value;
					this.SendPropertyChanged("Minutes");
					this.OnMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRun", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastRun
		{
			get
			{
				return this._LastRun;
			}
			set
			{
				if ((this._LastRun != value))
				{
					this.OnLastRunChanging(value);
					this.SendPropertyChanging();
					this._LastRun = value;
					this.SendPropertyChanged("LastRun");
					this.OnLastRunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorSchedule", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.CrextorSchedule = null;
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.CrextorSchedule = this;
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrextorUrl")]
	public partial class CrextorUrl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CrextorId;
		
		private string _Name;
		
		private string _Key;
		
		private string _ParentKey;
		
		private string _Url;
		
		private string _PagePattern;
		
		private System.Nullable<bool> _HasPaging;
		
		private bool _OverrideCategory;
		
		private short _Order;
		
		private bool _Active;
		
		private EntityRef<Crextor> _Crextor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnParentKeyChanging(string value);
    partial void OnParentKeyChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPagePatternChanging(string value);
    partial void OnPagePatternChanged();
    partial void OnHasPagingChanging(System.Nullable<bool> value);
    partial void OnHasPagingChanged();
    partial void OnOverrideCategoryChanging(bool value);
    partial void OnOverrideCategoryChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public CrextorUrl()
		{
			this._Crextor = default(EntityRef<Crextor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL")]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="NVarChar(50)")]
		public string ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2083) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagePattern", DbType="NVarChar(250)")]
		public string PagePattern
		{
			get
			{
				return this._PagePattern;
			}
			set
			{
				if ((this._PagePattern != value))
				{
					this.OnPagePatternChanging(value);
					this.SendPropertyChanging();
					this._PagePattern = value;
					this.SendPropertyChanged("PagePattern");
					this.OnPagePatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPaging", DbType="Bit")]
		public System.Nullable<bool> HasPaging
		{
			get
			{
				return this._HasPaging;
			}
			set
			{
				if ((this._HasPaging != value))
				{
					this.OnHasPagingChanging(value);
					this.SendPropertyChanging();
					this._HasPaging = value;
					this.SendPropertyChanged("HasPaging");
					this.OnHasPagingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideCategory", DbType="Bit NOT NULL")]
		public bool OverrideCategory
		{
			get
			{
				return this._OverrideCategory;
			}
			set
			{
				if ((this._OverrideCategory != value))
				{
					this.OnOverrideCategoryChanging(value);
					this.SendPropertyChanging();
					this._OverrideCategory = value;
					this.SendPropertyChanged("OverrideCategory");
					this.OnOverrideCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_CrextorUrl", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.CrextorUrls.Remove(this);
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.CrextorUrls.Add(this);
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbField")]
	public partial class DbField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CompanyId;
		
		private string _FieldName;
		
		private string _FieldType;
		
		private string _DefaultValue;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldTypeChanging(string value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    #endregion
		
		public DbField()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_DbField", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.DbFields.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.DbFields.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Download")]
	public partial class Download : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ViaWeb;
		
		private int _ViaService;
		
		private System.Nullable<int> _ClientId;
		
		private string _Ip;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnViaWebChanging(int value);
    partial void OnViaWebChanged();
    partial void OnViaServiceChanging(int value);
    partial void OnViaServiceChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Download()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViaWeb", DbType="Int NOT NULL")]
		public int ViaWeb
		{
			get
			{
				return this._ViaWeb;
			}
			set
			{
				if ((this._ViaWeb != value))
				{
					this.OnViaWebChanging(value);
					this.SendPropertyChanging();
					this._ViaWeb = value;
					this.SendPropertyChanged("ViaWeb");
					this.OnViaWebChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViaService", DbType="Int NOT NULL")]
		public int ViaService
		{
			get
			{
				return this._ViaService;
			}
			set
			{
				if ((this._ViaService != value))
				{
					this.OnViaServiceChanging(value);
					this.SendPropertyChanging();
					this._ViaService = value;
					this.SendPropertyChanged("ViaService");
					this.OnViaServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(15)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keyword")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Keyword1;
		
		private EntitySet<BrandKeyword> _BrandKeywords;
		
		private EntitySet<CategoryKeyword> _CategoryKeywords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKeyword1Changing(string value);
    partial void OnKeyword1Changed();
    #endregion
		
		public Keyword()
		{
			this._BrandKeywords = new EntitySet<BrandKeyword>(new Action<BrandKeyword>(this.attach_BrandKeywords), new Action<BrandKeyword>(this.detach_BrandKeywords));
			this._CategoryKeywords = new EntitySet<CategoryKeyword>(new Action<CategoryKeyword>(this.attach_CategoryKeywords), new Action<CategoryKeyword>(this.detach_CategoryKeywords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Keyword", Storage="_Keyword1", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Keyword1
		{
			get
			{
				return this._Keyword1;
			}
			set
			{
				if ((this._Keyword1 != value))
				{
					this.OnKeyword1Changing(value);
					this.SendPropertyChanging();
					this._Keyword1 = value;
					this.SendPropertyChanged("Keyword1");
					this.OnKeyword1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_BrandKeyword", Storage="_BrandKeywords", ThisKey="Id", OtherKey="KwId")]
		public EntitySet<BrandKeyword> BrandKeywords
		{
			get
			{
				return this._BrandKeywords;
			}
			set
			{
				this._BrandKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_CategoryKeyword", Storage="_CategoryKeywords", ThisKey="Id", OtherKey="KwId")]
		public EntitySet<CategoryKeyword> CategoryKeywords
		{
			get
			{
				return this._CategoryKeywords;
			}
			set
			{
				this._CategoryKeywords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrandKeywords(BrandKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = this;
		}
		
		private void detach_BrandKeywords(BrandKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = null;
		}
		
		private void attach_CategoryKeywords(CategoryKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = this;
		}
		
		private void detach_CategoryKeywords(CategoryKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Type;
		
		private System.Nullable<int> _SubType;
		
		private System.Nullable<int> _RefId;
		
		private string _Instance;
		
		private string _Machine;
		
		private string _ExternalIp;
		
		private string _LocalIp;
		
		private int _Action;
		
		private System.DateTime _Date;
		
		private string _XField1;
		
		private string _XField2;
		
		private string _XField3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnSubTypeChanging(System.Nullable<int> value);
    partial void OnSubTypeChanged();
    partial void OnRefIdChanging(System.Nullable<int> value);
    partial void OnRefIdChanged();
    partial void OnInstanceChanging(string value);
    partial void OnInstanceChanged();
    partial void OnMachineChanging(string value);
    partial void OnMachineChanged();
    partial void OnExternalIpChanging(string value);
    partial void OnExternalIpChanged();
    partial void OnLocalIpChanging(string value);
    partial void OnLocalIpChanged();
    partial void OnActionChanging(int value);
    partial void OnActionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnXField1Changing(string value);
    partial void OnXField1Changed();
    partial void OnXField2Changing(string value);
    partial void OnXField2Changed();
    partial void OnXField3Changing(string value);
    partial void OnXField3Changed();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubType", DbType="Int")]
		public System.Nullable<int> SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this.OnSubTypeChanging(value);
					this.SendPropertyChanging();
					this._SubType = value;
					this.SendPropertyChanged("SubType");
					this.OnSubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefId", DbType="Int")]
		public System.Nullable<int> RefId
		{
			get
			{
				return this._RefId;
			}
			set
			{
				if ((this._RefId != value))
				{
					this.OnRefIdChanging(value);
					this.SendPropertyChanging();
					this._RefId = value;
					this.SendPropertyChanged("RefId");
					this.OnRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instance", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Instance
		{
			get
			{
				return this._Instance;
			}
			set
			{
				if ((this._Instance != value))
				{
					this.OnInstanceChanging(value);
					this.SendPropertyChanging();
					this._Instance = value;
					this.SendPropertyChanged("Instance");
					this.OnInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine", DbType="VarChar(64)")]
		public string Machine
		{
			get
			{
				return this._Machine;
			}
			set
			{
				if ((this._Machine != value))
				{
					this.OnMachineChanging(value);
					this.SendPropertyChanging();
					this._Machine = value;
					this.SendPropertyChanged("Machine");
					this.OnMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalIp", DbType="VarChar(15)")]
		public string ExternalIp
		{
			get
			{
				return this._ExternalIp;
			}
			set
			{
				if ((this._ExternalIp != value))
				{
					this.OnExternalIpChanging(value);
					this.SendPropertyChanging();
					this._ExternalIp = value;
					this.SendPropertyChanged("ExternalIp");
					this.OnExternalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalIp", DbType="VarChar(15)")]
		public string LocalIp
		{
			get
			{
				return this._LocalIp;
			}
			set
			{
				if ((this._LocalIp != value))
				{
					this.OnLocalIpChanging(value);
					this.SendPropertyChanging();
					this._LocalIp = value;
					this.SendPropertyChanged("LocalIp");
					this.OnLocalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int NOT NULL")]
		public int Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XField1", DbType="VarChar(64)")]
		public string XField1
		{
			get
			{
				return this._XField1;
			}
			set
			{
				if ((this._XField1 != value))
				{
					this.OnXField1Changing(value);
					this.SendPropertyChanging();
					this._XField1 = value;
					this.SendPropertyChanged("XField1");
					this.OnXField1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XField2", DbType="VarChar(64)")]
		public string XField2
		{
			get
			{
				return this._XField2;
			}
			set
			{
				if ((this._XField2 != value))
				{
					this.OnXField2Changing(value);
					this.SendPropertyChanging();
					this._XField2 = value;
					this.SendPropertyChanged("XField2");
					this.OnXField2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XField3", DbType="VarChar(64)")]
		public string XField3
		{
			get
			{
				return this._XField3;
			}
			set
			{
				if ((this._XField3 != value))
				{
					this.OnXField3Changing(value);
					this.SendPropertyChanging();
					this._XField3 = value;
					this.SendPropertyChanged("XField3");
					this.OnXField3Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceType")]
	public partial class ResourceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private EntitySet<CrextorResource> _CrextorResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    #endregion
		
		public ResourceType()
		{
			this._CrextorResources = new EntitySet<CrextorResource>(new Action<CrextorResource>(this.attach_CrextorResources), new Action<CrextorResource>(this.detach_CrextorResources));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="VarChar(256)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceType_CrextorResource", Storage="_CrextorResources", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<CrextorResource> CrextorResources
		{
			get
			{
				return this._CrextorResources;
			}
			set
			{
				this._CrextorResources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceType = this;
		}
		
		private void detach_CrextorResources(CrextorResource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CrextorId;
		
		private int _QueueId;
		
		private System.Xml.Linq.XElement _Result1;
		
		private string _ErrorCode;
		
		private string _ErrorText;
		
		private System.DateTime _Date;
		
		private System.DateTime _LastUpdate;
		
		private EntityRef<Crextor> _Crextor;
		
		private EntityRef<UrlQueue> _UrlQueue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnQueueIdChanging(int value);
    partial void OnQueueIdChanged();
    partial void OnResult1Changing(System.Xml.Linq.XElement value);
    partial void OnResult1Changed();
    partial void OnErrorCodeChanging(string value);
    partial void OnErrorCodeChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public Result()
		{
			this._Crextor = default(EntityRef<Crextor>);
			this._UrlQueue = default(EntityRef<UrlQueue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL")]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QueueId
		{
			get
			{
				return this._QueueId;
			}
			set
			{
				if ((this._QueueId != value))
				{
					if (this._UrlQueue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueueIdChanging(value);
					this.SendPropertyChanging();
					this._QueueId = value;
					this.SendPropertyChanged("QueueId");
					this.OnQueueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Result", Storage="_Result1", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Result1
		{
			get
			{
				return this._Result1;
			}
			set
			{
				if ((this._Result1 != value))
				{
					this.OnResult1Changing(value);
					this.SendPropertyChanging();
					this._Result1 = value;
					this.SendPropertyChanged("Result1");
					this.OnResult1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorCode", DbType="VarChar(10)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this.OnErrorCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorCode = value;
					this.SendPropertyChanged("ErrorCode");
					this.OnErrorCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorText", DbType="VarChar(512)")]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime2 NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_Result", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UrlQueue_Result", Storage="_UrlQueue", ThisKey="QueueId", OtherKey="Id", IsForeignKey=true)]
		public UrlQueue UrlQueue
		{
			get
			{
				return this._UrlQueue.Entity;
			}
			set
			{
				UrlQueue previousValue = this._UrlQueue.Entity;
				if (((previousValue != value) 
							|| (this._UrlQueue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UrlQueue.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._UrlQueue.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._QueueId = value.Id;
					}
					else
					{
						this._QueueId = default(int);
					}
					this.SendPropertyChanged("UrlQueue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultAccess")]
	public partial class ResultAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private int _CrextorId;
		
		private string _Ip;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Crextor> _Crextor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public ResultAccess()
		{
			this._Company = default(EntityRef<Company>);
			this._Crextor = default(EntityRef<Crextor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ResultAccess", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ResultAccesses.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ResultAccesses.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_ResultAccess", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.ResultAccesses.Remove(this);
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.ResultAccesses.Add(this);
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CompanyId;
		
		private string _Name;
		
		private string _Path;
		
		private System.Data.Linq.Binary _Data;
		
		private System.Nullable<System.DateTime> _Date;
		
		private bool _Locked;
		
		private EntitySet<Crextor> _Crextors;
		
		private EntitySet<RuleBackup> _RuleBackups;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnLockedChanging(bool value);
    partial void OnLockedChanged();
    #endregion
		
		public Rule()
		{
			this._Crextors = new EntitySet<Crextor>(new Action<Crextor>(this.attach_Crextors), new Action<Crextor>(this.detach_Crextors));
			this._RuleBackups = new EntitySet<RuleBackup>(new Action<RuleBackup>(this.attach_RuleBackups), new Action<RuleBackup>(this.detach_RuleBackups));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="VarChar(256)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="Bit NOT NULL")]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Crextor", Storage="_Crextors", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<Crextor> Crextors
		{
			get
			{
				return this._Crextors;
			}
			set
			{
				this._Crextors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleBackup", Storage="_RuleBackups", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<RuleBackup> RuleBackups
		{
			get
			{
				return this._RuleBackups;
			}
			set
			{
				this._RuleBackups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Rule", Storage="_Company", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Rules.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Rules.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_Crextors(Crextor entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
		
		private void attach_RuleBackups(RuleBackup entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_RuleBackups(RuleBackup entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RuleBackup")]
	public partial class RuleBackup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleId;
		
		private System.DateTime _Date;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<Rule> _Rule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIdChanging(int value);
    partial void OnRuleIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public RuleBackup()
		{
			this._Rule = default(EntityRef<Rule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleBackup", Storage="_Rule", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.RuleBackups.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.RuleBackups.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sequence")]
	public partial class Sequence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type;
		
		private int _SubType;
		
		private int _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnSubTypeChanging(int value);
    partial void OnSubTypeChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public Sequence()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this.OnSubTypeChanging(value);
					this.SendPropertyChanging();
					this._SubType = value;
					this.SendPropertyChanged("SubType");
					this.OnSubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Server")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CountryId;
		
		private long _UniqueHash;
		
		private string _Name;
		
		private string _ComputerName;
		
		private string _ExternalIp;
		
		private string _LocalIp;
		
		private string _Mac;
		
		private short _Instance;
		
		private int _Socket;
		
		private int _ClientCount;
		
		private bool _Active;
		
		private System.DateTime _Date;
		
		private EntitySet<UrlQueue> _UrlQueues;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnUniqueHashChanging(long value);
    partial void OnUniqueHashChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnExternalIpChanging(string value);
    partial void OnExternalIpChanged();
    partial void OnLocalIpChanging(string value);
    partial void OnLocalIpChanged();
    partial void OnMacChanging(string value);
    partial void OnMacChanged();
    partial void OnInstanceChanging(short value);
    partial void OnInstanceChanged();
    partial void OnSocketChanging(int value);
    partial void OnSocketChanged();
    partial void OnClientCountChanging(int value);
    partial void OnClientCountChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Server()
		{
			this._UrlQueues = new EntitySet<UrlQueue>(new Action<UrlQueue>(this.attach_UrlQueues), new Action<UrlQueue>(this.detach_UrlQueues));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueHash", DbType="BigInt NOT NULL")]
		public long UniqueHash
		{
			get
			{
				return this._UniqueHash;
			}
			set
			{
				if ((this._UniqueHash != value))
				{
					this.OnUniqueHashChanging(value);
					this.SendPropertyChanging();
					this._UniqueHash = value;
					this.SendPropertyChanged("UniqueHash");
					this.OnUniqueHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalIp", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ExternalIp
		{
			get
			{
				return this._ExternalIp;
			}
			set
			{
				if ((this._ExternalIp != value))
				{
					this.OnExternalIpChanging(value);
					this.SendPropertyChanging();
					this._ExternalIp = value;
					this.SendPropertyChanged("ExternalIp");
					this.OnExternalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalIp", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string LocalIp
		{
			get
			{
				return this._LocalIp;
			}
			set
			{
				if ((this._LocalIp != value))
				{
					this.OnLocalIpChanging(value);
					this.SendPropertyChanging();
					this._LocalIp = value;
					this.SendPropertyChanged("LocalIp");
					this.OnLocalIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mac", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Mac
		{
			get
			{
				return this._Mac;
			}
			set
			{
				if ((this._Mac != value))
				{
					this.OnMacChanging(value);
					this.SendPropertyChanging();
					this._Mac = value;
					this.SendPropertyChanged("Mac");
					this.OnMacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instance", DbType="SmallInt NOT NULL")]
		public short Instance
		{
			get
			{
				return this._Instance;
			}
			set
			{
				if ((this._Instance != value))
				{
					this.OnInstanceChanging(value);
					this.SendPropertyChanging();
					this._Instance = value;
					this.SendPropertyChanged("Instance");
					this.OnInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Socket", DbType="Int NOT NULL")]
		public int Socket
		{
			get
			{
				return this._Socket;
			}
			set
			{
				if ((this._Socket != value))
				{
					this.OnSocketChanging(value);
					this.SendPropertyChanging();
					this._Socket = value;
					this.SendPropertyChanged("Socket");
					this.OnSocketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCount", DbType="Int NOT NULL")]
		public int ClientCount
		{
			get
			{
				return this._ClientCount;
			}
			set
			{
				if ((this._ClientCount != value))
				{
					this.OnClientCountChanging(value);
					this.SendPropertyChanging();
					this._ClientCount = value;
					this.SendPropertyChanged("ClientCount");
					this.OnClientCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_UrlQueue", Storage="_UrlQueues", ThisKey="Id", OtherKey="ServerId")]
		public EntitySet<UrlQueue> UrlQueues
		{
			get
			{
				return this._UrlQueues;
			}
			set
			{
				this._UrlQueues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Server", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Servers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Servers.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Server = this;
		}
		
		private void detach_UrlQueues(UrlQueue entity)
		{
			this.SendPropertyChanging();
			entity.Server = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UrlQueue")]
	public partial class UrlQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CrextorId;
		
		private int _ServerId;
		
		private int _UFClientId;
		
		private System.Nullable<int> _DEClientId;
		
		private int _ItemId;
		
		private short _ItemType;
		
		private System.Nullable<System.DateTime> _PubDate;
		
		private long _UrlHash;
		
		private string _UrlHash1;
		
		private string _Url;
		
		private string _UrlMiniPart;
		
		private int _RetryCount;
		
		private System.Nullable<System.DateTime> _CrawlStart;
		
		private System.Nullable<System.DateTime> _CrawlFinish;
		
		private System.DateTime _LastUpdate;
		
		private bool _Crawled;
		
		private bool _Selected;
		
		private double _Priority;
		
		private System.DateTime _Created;
		
		private bool _HasError;
		
		private bool _Active;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Crextor> _Crextor;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Server> _Server;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCrextorIdChanging(int value);
    partial void OnCrextorIdChanged();
    partial void OnServerIdChanging(int value);
    partial void OnServerIdChanged();
    partial void OnUFClientIdChanging(int value);
    partial void OnUFClientIdChanged();
    partial void OnDEClientIdChanging(System.Nullable<int> value);
    partial void OnDEClientIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnItemTypeChanging(short value);
    partial void OnItemTypeChanged();
    partial void OnPubDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPubDateChanged();
    partial void OnUrlHashChanging(long value);
    partial void OnUrlHashChanged();
    partial void OnUrlHash1Changing(string value);
    partial void OnUrlHash1Changed();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnUrlMiniPartChanging(string value);
    partial void OnUrlMiniPartChanged();
    partial void OnRetryCountChanging(int value);
    partial void OnRetryCountChanged();
    partial void OnCrawlStartChanging(System.Nullable<System.DateTime> value);
    partial void OnCrawlStartChanged();
    partial void OnCrawlFinishChanging(System.Nullable<System.DateTime> value);
    partial void OnCrawlFinishChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnCrawledChanging(bool value);
    partial void OnCrawledChanged();
    partial void OnSelectedChanging(bool value);
    partial void OnSelectedChanged();
    partial void OnPriorityChanging(double value);
    partial void OnPriorityChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnHasErrorChanging(bool value);
    partial void OnHasErrorChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public UrlQueue()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Crextor = default(EntityRef<Crextor>);
			this._Client = default(EntityRef<Client>);
			this._Server = default(EntityRef<Server>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrextorId", DbType="Int NOT NULL")]
		public int CrextorId
		{
			get
			{
				return this._CrextorId;
			}
			set
			{
				if ((this._CrextorId != value))
				{
					if (this._Crextor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrextorIdChanging(value);
					this.SendPropertyChanging();
					this._CrextorId = value;
					this.SendPropertyChanged("CrextorId");
					this.OnCrextorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerId", DbType="Int NOT NULL")]
		public int ServerId
		{
			get
			{
				return this._ServerId;
			}
			set
			{
				if ((this._ServerId != value))
				{
					if (this._Server.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerIdChanging(value);
					this.SendPropertyChanging();
					this._ServerId = value;
					this.SendPropertyChanged("ServerId");
					this.OnServerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UFClientId", DbType="Int NOT NULL")]
		public int UFClientId
		{
			get
			{
				return this._UFClientId;
			}
			set
			{
				if ((this._UFClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUFClientIdChanging(value);
					this.SendPropertyChanging();
					this._UFClientId = value;
					this.SendPropertyChanged("UFClientId");
					this.OnUFClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEClientId", DbType="Int")]
		public System.Nullable<int> DEClientId
		{
			get
			{
				return this._DEClientId;
			}
			set
			{
				if ((this._DEClientId != value))
				{
					this.OnDEClientIdChanging(value);
					this.SendPropertyChanging();
					this._DEClientId = value;
					this.SendPropertyChanged("DEClientId");
					this.OnDEClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="SmallInt NOT NULL")]
		public short ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PubDate
		{
			get
			{
				return this._PubDate;
			}
			set
			{
				if ((this._PubDate != value))
				{
					this.OnPubDateChanging(value);
					this.SendPropertyChanging();
					this._PubDate = value;
					this.SendPropertyChanged("PubDate");
					this.OnPubDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlHash", DbType="BigInt NOT NULL")]
		public long UrlHash
		{
			get
			{
				return this._UrlHash;
			}
			set
			{
				if ((this._UrlHash != value))
				{
					this.OnUrlHashChanging(value);
					this.SendPropertyChanging();
					this._UrlHash = value;
					this.SendPropertyChanged("UrlHash");
					this.OnUrlHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlHash1", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string UrlHash1
		{
			get
			{
				return this._UrlHash1;
			}
			set
			{
				if ((this._UrlHash1 != value))
				{
					this.OnUrlHash1Changing(value);
					this.SendPropertyChanging();
					this._UrlHash1 = value;
					this.SendPropertyChanged("UrlHash1");
					this.OnUrlHash1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2083) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlMiniPart", DbType="VarChar(8)")]
		public string UrlMiniPart
		{
			get
			{
				return this._UrlMiniPart;
			}
			set
			{
				if ((this._UrlMiniPart != value))
				{
					this.OnUrlMiniPartChanging(value);
					this.SendPropertyChanging();
					this._UrlMiniPart = value;
					this.SendPropertyChanged("UrlMiniPart");
					this.OnUrlMiniPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetryCount", DbType="Int NOT NULL")]
		public int RetryCount
		{
			get
			{
				return this._RetryCount;
			}
			set
			{
				if ((this._RetryCount != value))
				{
					this.OnRetryCountChanging(value);
					this.SendPropertyChanging();
					this._RetryCount = value;
					this.SendPropertyChanged("RetryCount");
					this.OnRetryCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrawlStart", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CrawlStart
		{
			get
			{
				return this._CrawlStart;
			}
			set
			{
				if ((this._CrawlStart != value))
				{
					this.OnCrawlStartChanging(value);
					this.SendPropertyChanging();
					this._CrawlStart = value;
					this.SendPropertyChanged("CrawlStart");
					this.OnCrawlStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrawlFinish", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CrawlFinish
		{
			get
			{
				return this._CrawlFinish;
			}
			set
			{
				if ((this._CrawlFinish != value))
				{
					this.OnCrawlFinishChanging(value);
					this.SendPropertyChanging();
					this._CrawlFinish = value;
					this.SendPropertyChanged("CrawlFinish");
					this.OnCrawlFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime2 NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crawled", DbType="Bit NOT NULL")]
		public bool Crawled
		{
			get
			{
				return this._Crawled;
			}
			set
			{
				if ((this._Crawled != value))
				{
					this.OnCrawledChanging(value);
					this.SendPropertyChanging();
					this._Crawled = value;
					this.SendPropertyChanged("Crawled");
					this.OnCrawledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Selected", DbType="Bit NOT NULL")]
		public bool Selected
		{
			get
			{
				return this._Selected;
			}
			set
			{
				if ((this._Selected != value))
				{
					this.OnSelectedChanging(value);
					this.SendPropertyChanging();
					this._Selected = value;
					this.SendPropertyChanged("Selected");
					this.OnSelectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Float NOT NULL")]
		public double Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2 NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasError", DbType="Bit NOT NULL")]
		public bool HasError
		{
			get
			{
				return this._HasError;
			}
			set
			{
				if ((this._HasError != value))
				{
					this.OnHasErrorChanging(value);
					this.SendPropertyChanging();
					this._HasError = value;
					this.SendPropertyChanged("HasError");
					this.OnHasErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UrlQueue_Result", Storage="_Results", ThisKey="Id", OtherKey="QueueId")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crextor_UrlQueue", Storage="_Crextor", ThisKey="CrextorId", OtherKey="Id", IsForeignKey=true)]
		public Crextor Crextor
		{
			get
			{
				return this._Crextor.Entity;
			}
			set
			{
				Crextor previousValue = this._Crextor.Entity;
				if (((previousValue != value) 
							|| (this._Crextor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Crextor.Entity = null;
						previousValue.UrlQueues.Remove(this);
					}
					this._Crextor.Entity = value;
					if ((value != null))
					{
						value.UrlQueues.Add(this);
						this._CrextorId = value.Id;
					}
					else
					{
						this._CrextorId = default(int);
					}
					this.SendPropertyChanged("Crextor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UrlQueue", Storage="_Client", ThisKey="UFClientId", OtherKey="Id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.UrlQueues.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.UrlQueues.Add(this);
						this._UFClientId = value.Id;
					}
					else
					{
						this._UFClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_UrlQueue", Storage="_Server", ThisKey="ServerId", OtherKey="Id", IsForeignKey=true)]
		public Server Server
		{
			get
			{
				return this._Server.Entity;
			}
			set
			{
				Server previousValue = this._Server.Entity;
				if (((previousValue != value) 
							|| (this._Server.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Server.Entity = null;
						previousValue.UrlQueues.Remove(this);
					}
					this._Server.Entity = value;
					if ((value != null))
					{
						value.UrlQueues.Add(this);
						this._ServerId = value.Id;
					}
					else
					{
						this._ServerId = default(int);
					}
					this.SendPropertyChanged("Server");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.UrlQueue = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.UrlQueue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Version")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Version1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersion1Changing(string value);
    partial void OnVersion1Changed();
    #endregion
		
		public Version()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Version", Storage="_Version1", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Version1
		{
			get
			{
				return this._Version1;
			}
			set
			{
				if ((this._Version1 != value))
				{
					this.OnVersion1Changing(value);
					this.SendPropertyChanging();
					this._Version1 = value;
					this.SendPropertyChanged("Version1");
					this.OnVersion1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class CREXTORS_GetDatasetResult
	{
		
		private int _Id;
		
		private System.Nullable<bool> _Crawled;
		
		private System.Nullable<System.DateTime> _LastCrawlStart;
		
		public CREXTORS_GetDatasetResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crawled", DbType="Bit")]
		public System.Nullable<bool> Crawled
		{
			get
			{
				return this._Crawled;
			}
			set
			{
				if ((this._Crawled != value))
				{
					this._Crawled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCrawlStart", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastCrawlStart
		{
			get
			{
				return this._LastCrawlStart;
			}
			set
			{
				if ((this._LastCrawlStart != value))
				{
					this._LastCrawlStart = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
